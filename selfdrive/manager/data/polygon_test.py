left_bound =  [
				[
					[
						-670.5698649980177,
						330.47006911023124
					],
					[
						-670.3698854302979,
						330.0118026238997
					],
					[
						-670.1699058625782,
						329.55353613756824
					],
					[
						-669.9699262948584,
						329.0952696512367
					],
					[
						-669.7696578255388,
						328.63712968496634
					],
					[
						-669.5684846397031,
						328.1793859255324
					],
					[
						-669.3673114538675,
						327.7216421660985
					],
					[
						-669.1661382680318,
						327.2638984066645
					],
					[
						-668.964965082196,
						326.8061546472306
					],
					[
						-668.7590000801604,
						326.3505497104611
					],
					[
						-668.552589670021,
						325.8951435811808
					],
					[
						-668.3461792598816,
						325.43973745190044
					],
					[
						-668.1397688497424,
						324.9843313226201
					],
					[
						-667.933358439603,
						324.5289251933397
					],
					[
						-667.7283141498241,
						324.07290239261425
					],
					[
						-667.5232968882489,
						323.61686739126435
					],
					[
						-667.3182742802047,
						323.1608347946035
					],
					[
						-667.1131002238192,
						322.7048703150809
					],
					[
						-666.9079261674336,
						322.24890583555833
					],
					[
						-666.7027921022511,
						321.7929233856788
					],
					[
						-666.4980887671743,
						321.3367473838896
					],
					[
						-666.2933854320975,
						320.88057138210036
					],
					[
						-666.0886820942475,
						320.42439538155554
					],
					[
						-665.8839787368129,
						319.96821938979906
					],
					[
						-665.6792753793783,
						319.5120433980426
					],
					[
						-665.47488108108,
						319.0557294894289
					],
					[
						-665.2720723797698,
						318.59870801217335
					],
					[
						-665.0692636784596,
						318.1416865349177
					],
					[
						-664.8664328820663,
						317.6846748661847
					],
					[
						-664.6635009014458,
						317.2277081154889
					],
					[
						-664.4605689208254,
						316.77074136479314
					],
					[
						-664.2573114783646,
						316.3139198516449
					],
					[
						-664.0527287898648,
						315.85768973036164
					],
					[
						-663.8481461013649,
						315.40145960907836
					],
					[
						-663.6435150451306,
						314.9452511944209
					],
					[
						-663.4386564837631,
						314.4891448802413
					],
					[
						-663.2337979223958,
						314.0330385660618
					]
				],
				[
					[
						-677.2384471629234,
						345.42476332830444
					],
					[
						-677.0322147630378,
						344.96927655875186
					],
					[
						-676.8259823631523,
						344.5137897891993
					],
					[
						-676.6204608289892,
						344.05798344928604
					],
					[
						-676.4166706466394,
						343.6013987785207
					],
					[
						-676.2128804642897,
						343.14481410775545
					],
					[
						-676.00909028194,
						342.6882294369901
					],
					[
						-675.8053000995902,
						342.23164476622486
					],
					[
						-675.600839863598,
						341.77535991859173
					],
					[
						-675.3961934598696,
						341.3191583738322
					],
					[
						-675.1915470561411,
						340.8629568290727
					],
					[
						-674.9869006524126,
						340.40675528431314
					],
					[
						-674.7822542486841,
						339.9505537395536
					],
					[
						-674.5749894908553,
						339.4955371113165
					],
					[
						-674.3673480774356,
						339.0406909357438
					],
					[
						-674.1597066640159,
						338.58584476017114
					],
					[
						-673.952227764826,
						338.130924448961
					],
					[
						-673.7448346352553,
						337.67596501142083
					],
					[
						-673.5374415056847,
						337.22100557388063
					],
					[
						-673.3316816054369,
						336.7653101992707
					],
					[
						-673.1282572637858,
						336.3085624163271
					]
				]
			]

right_bound = [
				[
					[
						-677.2024451987625,
						316.3710165664293
					],
					[
						-676.8024402534083,
						316.071023160348
					],
					[
						-676.4005049713869,
						315.77364682480743
					],
					[
						-675.9957688753461,
						315.4800677169648
					],
					[
						-675.6093753160444,
						315.1634212038704
					],
					[
						-675.2321683604202,
						314.83522170260835
					],
					[
						-674.8834690566258,
						314.4775915411172
					],
					[
						-674.5434206731724,
						314.11103036353467
					],
					[
						-674.22894937201,
						313.7240784789573
					],
					[
						-673.9473716527596,
						313.3109029859501
					],
					[
						-673.6657939335092,
						312.8977274929429
					],
					[
						-673.4249898127861,
						312.46036520550086
					],
					[
						-673.1973857986721,
						312.0151726485559
					],
					[
						-672.9697817845582,
						311.5699800916109
					],
					[
						-672.735844733476,
						311.12808317211335
					],
					[
						-672.5018370230798,
						310.6862230228861
					],
					[
						-672.2678293126836,
						310.2443628736589
					],
					[
						-672.0272555300662,
						309.80604762187517
					]
				],
				[
					[
						-688.0833129276241,
						339.33272822407366
					],
					[
						-687.8499822266265,
						338.89051019643125
					],
					[
						-687.6166515256289,
						338.4482921687888
					],
					[
						-687.3833208246313,
						338.00607414114637
					],
					[
						-687.1468794048117,
						337.56551536940844
					],
					[
						-686.9095811682503,
						337.1254136233032
					],
					[
						-686.672282931689,
						336.68531187719793
					],
					[
						-686.4350963697459,
						336.24515013628616
					],
					[
						-686.1991374959998,
						335.80432884607836
					],
					[
						-685.9631786222538,
						335.3635075558705
					],
					[
						-685.7272197485078,
						334.92268626566266
					],
					[
						-685.4912608747617,
						334.48186497545487
					],
					[
						-685.2569126792972,
						334.04018550514513
					],
					[
						-685.0226461065598,
						333.5984625457035
					],
					[
						-684.7883795338225,
						333.15673958626184
					],
					[
						-684.5541129610851,
						332.7150166268202
					],
					[
						-684.3195254694002,
						332.2734640452576
					],
					[
						-684.0848736557392,
						331.83194561263485
					],
					[
						-683.8502218420782,
						331.3904271800121
					],
					[
						-683.6155700284173,
						330.94890874738945
					]
				]
			]

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import math

# plt.figure(figsize=(10, 10))

# # 왼쪽 끝 차선 그리기
# for segment in left_bound:
#     x_coords, y_coords = zip(*segment)
#     plt.plot(x_coords, y_coords, 'b-', label='Left Bound')

# # 오른쪽 끝 차선 그리기
# for segment in right_bound:
#     x_coords, y_coords = zip(*segment)
#     plt.plot(x_coords, y_coords, 'r-', label='Right Bound')

# plt.xlabel("X")
# plt.ylabel("Y")
# plt.title("Lane Boundaries Visualization")
# plt.grid(True)

# # 레전드 표시 (중복 제거)
# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys())

# plt.show()

# plt.figure(figsize=(10, 10))

# # 각 끊어진 차선 세그먼트마다 폴리곤을 그림
# for left_segment, right_segment in zip(left_bound, right_bound):
#     polygon_coords = left_segment + right_segment[::-1] # 왼쪽 세그먼트와 오른쪽 세그먼트를 거꾸로 연결
#     polygon = patches.Polygon(polygon_coords, closed=True, facecolor='gray', edgecolor='black')
#     plt.gca().add_patch(polygon)

# plt.xlabel("X")
# plt.ylabel("Y")
# plt.title("Lane Area Visualization")
# plt.grid(True)
# plt.xlim(min([x for segment in left_bound+right_bound for x, y in segment]) - 10, 
#          max([x for segment in left_bound+right_bound for x, y in segment]) + 10) # x축 범위 설정
# plt.ylim(min([y for segment in left_bound+right_bound for x, y in segment]) - 10, 
#          max([y for segment in left_bound+right_bound for x, y in segment]) + 10) # y축 범위 설정

# plt.show()

# 플랫한 형태로 변환
def calculate_distance(coord1, coord2):
    return ((coord1[0] - coord2[0]) ** 2 + (coord1[1] - coord2[1]) ** 2) ** 0.5

def flatten_in_order(bounds):
    if len(bounds) <= 1:
        return bounds[0] if bounds else []

    # 각 뭉치 사이의 거리를 계산합니다.
    distances = []
    for i in range(len(bounds) - 1):
        distance_end_start = calculate_distance(bounds[i][-1], bounds[i+1][0])
        distance_start_end = calculate_distance(bounds[i][0], bounds[i+1][-1])
        
        # 거리가 가장 짧은 뭉치의 순서를 결정합니다.
        if distance_end_start < distance_start_end:
            distances.append((distance_end_start, i, i+1))
        else:
            distances.append((distance_start_end, i+1, i))
    
    # 거리를 기준으로 뭉치를 정렬합니다.
    distances.sort(key=lambda x: x[0])

    # 뭉치를 플랫하게 만듭니다.
    ordered = [bounds[distances[0][1]]]
    visited = set([distances[0][1]])
    
    for _, start, end in distances:
        if end not in visited:
            ordered.append(bounds[end])
            visited.add(end)
    
    return [item for sublist in ordered for item in sublist]

flat_left_bound = flatten_in_order(left_bound)
flat_right_bound = flatten_in_order(right_bound)

# 폴리곤 그리기
fig, ax = plt.subplots(figsize=(10, 10))

# 왼쪽 차선 -> 오른쪽 차선 순서로 좌표를 연결
all_coords = flat_left_bound + flat_right_bound[::-1]

polygon = patches.Polygon(all_coords, closed=True, facecolor='gray', edgecolor='black')
ax.add_patch(polygon)

plt.xlabel("X")
plt.ylabel("Y")
plt.title("Lane Area Visualization")
plt.grid(True)
plt.xlim(min([x for x, y in all_coords]) - 10, max([x for x, y in all_coords]) + 10)  # x축 범위 설정
plt.ylim(min([y for x, y in all_coords]) - 10, max([y for x, y in all_coords]) + 10)  # y축 범위 설정

plt.show()